public composite StdFuncSpecial {
	graph
		() as Performer = Custom() {
			logic
				onProcess: {
					//<*32>float32 zero = 0.0w;
					//<*64>float64 zero = 0.0l;
					//<*32>float32 one = 1.0w;
					//<*64>float64 one = 1.0l;
					//<*32>float32 two = 2.0w;
					//<*64>float64 two = 2.0l;
					//<*32>float32 twop = 2.8w;
					//<*64>float64 twop = 2.8l;
					//<*32>float32 twon = -2.8w;
					//<*64>float64 twon = -2.8l;
					//<*32>float32 three = 3.0w;
					//<*64>float64 three = 3.0l;
					//<*32>float32 four = 4.0w;
					//<*64>float64 four = 4.0l;
					
					//<*32>mutable float32 y = 0.0;
					//<*64>mutable float64 y = 0.0;
					//<*32>mutable float32 x = 0.0;
					//<*64>mutable float64 x = 0.0;
					//<hypot_32 fma_32>mutable float32 x2 = 0.0;
					//<hypot_64 fma_64>mutable float64 x2 = 0.0;
					//<fma_32>mutable float32 x3 = 0.0;
					//<fma_64>mutable float64 x3 = 0.0;
					//<hypot_*>x = three; x2 = four; y = com.ibm.streamsx.math.std::hypot(x, x2);
					//<erf_*>x = zero; y = com.ibm.streamsx.math.std::erf(x);
					//<erfc_*>x = zero; y = com.ibm.streamsx.math.std::erfc(x);
					//<truncp_*>x = twop;
					//<truncn_*>x = twon;
					//<trunc*_*>y = com.ibm.streamsx.math.std::trunc(x);
					//<fma_*>x = four; x2 = two; x3 = three;
					//<fma_*>y = com.ibm.streamsx.math.std::fma(x, x2, x3);
					
					//<hypot_*>float64 expec = 5.0l;
					//<erf_*>float64 expec = 0.0l;
					//<erfc_*>float64 expec = 1.0l;
					//<truncp_*>float64 expec = 2.0;
					//<truncn_*>float64 expec = -2.0;
					//<fma_*>float64 expec = 11.0;
					float64 diff = (float64)y - expec;
					
					rstring func =
					//<hypot_*>"hypot";
					//<erf_*>"erf";
					//<erfc_*>"erfc";
					//<log2_*>"log2";
					//<trunc*_*>"trunc";
					//<fma_*>"fma";
					printStringLn(func + "(" + (rstring)x + ")=" +(rstring)y + " diff=" + (rstring)diff);
					if (abs(diff) > 0.00001l) abort();
					printStringLn("End of sample");
				}
		}

	config restartable: false;
}
