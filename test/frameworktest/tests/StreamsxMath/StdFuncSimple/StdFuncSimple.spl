public composite StdFuncSimple {
	graph
		() as Performer = Custom() {
			logic
				onProcess: {
					//<*32>float32 pi = PI();
					//<*64>float64 pi = PI();
					//<*32>float32 pi12 = pi / 2.0w;
					//<*64>float64 pi12 = pi / 2.0l;
					//<*32>float32 pi16 = pi / 6.0w;
					//<*64>float64 pi16 = pi / 6.0l;
					//<*32>float32 pi14 = pi / 4.0w;
					//<*64>float64 pi14 = pi / 4.0l;
					//<*32>float32 pi13 = pi / 3.0w;
					//<*64>float64 pi13 = pi / 3.0l;
					//<*32>float32 one = 1.0w;
					//<*64>float64 one = 1.0l;
					//<*32>float32 one05 = 0.5w;
					//<*64>float64 one05 = 0.5l;
					//<*32>mutable float32 y = 0.0;
					//<*64>mutable float64 y = 0.0;
					//<*32>mutable float32 x = 0.0;
					//<*64>mutable float64 x = 0.0;
					//<cos*>x = pi13; y = com.ibm.streamsx.math.std::cos(x);
					//<sin*>x = pi16; y = com.ibm.streamsx.math.std::sin(x);
					//<tan*>x = pi14; y = com.ibm.streamsx.math.std::tan(x);
					//<acos*>x = one05; y = com.ibm.streamsx.math.std::acos(x);
					//<asin*>x = one05; y = com.ibm.streamsx.math.std::asin(x);
					//<atan_*>x = one; y = com.ibm.streamsx.math.std::atan(x);
					//<atan2*>x = one; y = com.ibm.streamsx.math.std::atan2(x, x);
					//<cos* sin*>float64 expec = 0.5l;
					//<tan*>float64 expec = 1.0l;
					//<acos*>float64 expec = pi13;
					//<asin*>float64 expec = pi16;
					//<atan*>float64 expec = pi14;
					float64 diff = (float64)y - expec;
					rstring func =
					//<cos*>"cos";
					//<sin*>"sin";
					//<tan*>"tan";
					//<acos*>"acos";
					//<asin*>"asin";
					//<atan_*>"atan";
					//<atan2*>"atan2";
					
					printStringLn(func + "(" + (rstring)x + ")=" +(rstring)y + " diff=" + (rstring)diff);
					if (abs(diff) > 0.00001l) abort();
					printStringLn("End of sample");
				}
		}

	config restartable: false;
}
