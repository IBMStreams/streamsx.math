public composite StdFuncSimple {
	graph
		() as Performer = Custom() {
			logic
				onProcess: {
					//<*32>float32 pi = PI();
					//<*64>float64 pi = PI();
					//<*32>float32 pi12 = pi / 2.0w;
					//<*64>float64 pi12 = pi / 2.0l;
					//<*32>float32 pi16 = pi / 6.0w;
					//<*64>float64 pi16 = pi / 6.0l;
					//<*32>float32 pi14 = pi / 4.0w;
					//<*64>float64 pi14 = pi / 4.0l;
					//<*32>float32 pi13 = pi / 3.0w;
					//<*64>float64 pi13 = pi / 3.0l;
					//<*32>float32 one = 1.0w;
					//<*64>float64 one = 1.0l;
					//<*32>float32 one05 = 0.5w;
					//<*64>float64 one05 = 0.5l;
					
					//<*32>mutable float32 y = 0.0;
					//<*64>mutable float64 y = 0.0;
					//<*32>mutable float32 x = 0.0;
					//<*64>mutable float64 x = 0.0;
					//<cos_*>x = pi13; y = com.ibm.streamsx.math.std::cos(x);
					//<sin_*>x = pi16; y = com.ibm.streamsx.math.std::sin(x);
					//<tan_*>x = pi14; y = com.ibm.streamsx.math.std::tan(x);
					//<acos_*>x = one05; y = com.ibm.streamsx.math.std::acos(x);
					//<asin_*>x = one05; y = com.ibm.streamsx.math.std::asin(x);
					//<atan_*>x = one; y = com.ibm.streamsx.math.std::atan(x);
					//<atan2_*>x = one; y = com.ibm.streamsx.math.std::atan2(x, x);
					//<sinh_*>x = one; y = com.ibm.streamsx.math.std::sinh(x);
					//<cosh_*>x = one; y = com.ibm.streamsx.math.std::cosh(x);
					//<tanh_*>x = one; y = com.ibm.streamsx.math.std::tanh(x);
					//<asinh_*>x = one; y = com.ibm.streamsx.math.std::asinh(x);
					//<acosh_*>x = one; y = com.ibm.streamsx.math.std::acosh(x);
					//<atanh_*>x = one05; y = com.ibm.streamsx.math.std::atanh(x);
					
					//<cos_* sin_*>float64 expec = 0.5l;
					//<tan_*>float64 expec = 1.0l;
					//<acos_*>float64 expec = pi13;
					//<asin_*>float64 expec = pi16;
					//<atan_* atan2_*>float64 expec = pi14;
					//<sinh_*>float64 expec = 1.175201194l;
					//<cosh_*>float64 expec = 1.543080635l;
					//<tanh_*>float64 expec = 0.761594156l;
					//<asinh_*>float64 expec = 0.881373587l;
					//<acosh_*>float64 expec = 0.0l;
					//<atanh_*>float64 expec = 0.549306144l;
					float64 diff = (float64)y - expec;
					
					rstring func =
					//<cos_*>"cos";
					//<sin_*>"sin";
					//<tan_*>"tan";
					//<acos_*>"acos";
					//<asin_*>"asin";
					//<atan_*>"atan";
					//<atan2_*>"atan2";
					//<sinh_*>"sinh";
					//<cosh_*>"cosh";
					//<tanh_*>"tanh";
					//<asinh_*>"asinh";
					//<acosh_*>"acosh";
					//<atanh_*>"atanh";
					printStringLn(func + "(" + (rstring)x + ")=" +(rstring)y + " diff=" + (rstring)diff);
					if (abs(diff) > 0.00001l) abort();
					printStringLn("End of sample");
				}
		}

	config restartable: false;
}
